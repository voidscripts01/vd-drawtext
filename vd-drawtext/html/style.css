/* * vd-drawtext
 * Version: 1.0.0
 * Author: KITSO
 *
 * Please do not remove this credit.
 */

/* vd-drawtext/html/style.css */
@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@700&display=swap');

/* --- PROFESSIONAL REFACTOR ---
  All customizable values have been moved to CSS variables.
  Users can now edit the position, colors, and fonts from one place.
*/
:root {
    /* --- Positioning --- */
    /* 'top' and 'transform' control vertical centering. */
    /* 'left' or 'right' control horizontal position. */
    
    /* Example: Center-Right (Original) */
    --ui-top: 50%;
    --ui-right: 2%;
    --ui-left: auto;
    --ui-transform: translate(0, -50%);
    --ui-slide-in-start: translate(30px, -50%); /* Slide-in animation start */

    /* Example: Bottom-Center */
    /*
    --ui-top: auto;
    --ui-right: 50%;
    --ui-left: auto;
    --ui-transform: translate(-50%, 0);
    --ui-slide-in-start: translate(-50%, 30px);
    */

    /* --- Colors --- */
    --color-primary: #00c3ff;      /* Main glow/key color */
    --color-background: rgba(2, 2, 2, 0.85);
    --color-key-text: #000;
    --color-message-text: #fff;

    /* --- Font --- */
    --font-family: 'Roboto Mono', monospace;
}

body {
    background-color: transparent;
    opacity: 0;
    margin: 0;
    padding: 0;
    overflow: hidden;
    transition: opacity 0.3s ease-in-out;
}

/* The main container */
#drawtext-container {
    position: absolute;
    top: var(--ui-top); 
    right: var(--ui-right); 
    left: var(--ui-left); 
    
    /* Animation Initialization */
    opacity: 0; 
    transform: var(--ui-slide-in-start); 
    transition: opacity 0.5s ease-out, transform 0.5s cubic-bezier(0.23, 1, 0.32, 1); 
    
    display: flex; 
    align-items: center;
    gap: 15px; 
    padding: 10px 20px;
    border-radius: 8px;
    
    background-color: var(--color-background); 
    border: 2px solid var(--color-primary); 
    box-shadow: 0 0 10px rgba(0, 195, 255, 0.6); /* Kept original RGBA for the base glow */
    
    font-family: var(--font-family); 
}

/* The Action Key (e.g., E) */
#key-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 35px; 
    height: 35px;
    border-radius: 4px;
    
    background-color: var(--color-primary); 
    box-shadow: 0 0 10px var(--color-primary); 
    
    transition: transform 0.2s ease-out;
    transform: rotate(360deg); 
    animation: key-spin-out 0.2s ease-in 1 forwards; 
}

#key {
    color: var(--color-key-text); 
    font-size: 18px;
    font-weight: 900;
    text-transform: uppercase;
}

/* The Message Text */
#message {
    color: var(--color-message-text); 
    text-shadow: 0 0 4px rgba(255, 255, 255, 0.5); 
    font-size: 16px;
    letter-spacing: 1px;
}

/* State when the text is visible (body opacity control) */
body.visible {
    opacity: 1;
}

/* Visible state for the container to trigger the slide-in animation */
body.visible #drawtext-container {
    opacity: 1;
    transform: var(--ui-transform); 
    animation: glow-spin 2s infinite ease-in-out alternate; 
}

/* ---------------------------------------------------------------- */
/* --- KEY RING SPIN MOVEMENT --- */
/* ---------------------------------------------------------------- */

@keyframes key-spin-in {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

@keyframes key-spin-out {
    from { transform: rotate(360deg); }
    to { transform: rotate(0deg); }
}

.anim-key-ring-spin #key-wrapper {
    animation: key-spin-in 0.5s ease-out 1 forwards; 
    transform: rotate(360deg); 
}

#drawtext-container #key-wrapper {
    animation: key-spin-out 0.2s ease-in 1 forwards; 
}

/* ---------------------------------------------------------------- */
/* --- GLOW SPINNING (Subtle Wobble) --- */
/* ---------------------------------------------------------------- */

@keyframes glow-spin {
    /* Use variables to ensure the final transform state is applied */
    0% { transform: var(--ui-transform) rotate(-1deg); } 
    100% { transform: var(--ui-transform) rotate(1deg); }
}

